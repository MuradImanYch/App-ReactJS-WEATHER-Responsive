{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","gettingWeather","e","a","preventDefault","apiKey","fetch","target","elements","city","value","apiUrl","json","data","date","Date","sunset","sys","setTime","sunsetDate","getHours","getMinutes","getSeconds","sunrise","sunriseDate","console","log","$","css","weather","main","faWeather","setState","name","country","minTemp","Math","round","temp_min","temp","maxTemp","temp_max","ico","className","title","description","humid","humidity","feels","feels_like","press","pressure","windSpd","wind","speed","componentDidMount","document","ready","dateTime","day","getDate","toString","month","getMonth","year","getFullYear","hours","minutes","seconds","bgColor","length","fullDate","fullTime","text","backgroundColor","setInterval","state","undefined","id","this","onSubmit","autoFocus","type","placeholder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10a1f4af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport $ from 'jquery';\n\nexport default class App extends Component {\n  \n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       city: undefined,\n       minTemp: undefined,\n       temp: undefined,\n       maxTemp: undefined,\n       ico: undefined,\n       humid: undefined,\n       feels: undefined,\n       press: undefined,\n       windSpd: undefined,\n       sunrise: undefined,\n       sunset: undefined\n    }\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n\n    const apiKey = await \"158ee256c0cca4cefafed4b9c27b735d\";\n    let apiUrl = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e.target.elements.city.value}&appid=${apiKey}&units=metric`);\n    let data = await apiUrl.json();\n\n    let date = new Date();\n    let sunset = data.sys.sunset;\n    date.setTime(sunset);\n    let sunsetDate = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n    let sunrise = data.sys.sunrise;\n    date.setTime(sunrise);\n    let sunriseDate = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n    console.log(data);\n    $('body').css({'background': 'url(\"./cloud.gif\")'});\n    let faWeather;\n    if(data.weather[0].main === \"Clouds\") {\n      faWeather = 'fas fa-cloud';\n    }\n    else if (data.weather[0].main === \"Clear\") {\n      faWeather = 'fas fa-sun';\n    }\n    else if (data.weather[0].main === \"Snow\") {\n      faWeather = 'far fa-snowflake';\n    }\n    else if (data.weather[0].main === \"Fog\") {\n      faWeather = 'fas fa-smog';\n    }\n    else if (data.weather[0].main === \"Drizzle\") {\n      faWeather = 'fas fa-tint';\n    }\n    else if (data.weather[0].main === \"Rain\") {\n      faWeather = 'fas fa-cloud-rain';\n    }\n    else if (data.weather[0].main === \"Mist\") {\n      faWeather = 'fas fa-smog';\n    }\n    else if (data.weather[0].main === \"Haze\") {\n      faWeather = 'fas fa-smog';\n    }\n\n    this.setState({\n      city: data.name + ', ' + data.sys.country,\n      minTemp: Math.round(data.main.temp_min),\n      temp: Math.round(data.main.temp),\n      maxTemp: Math.round(data.main.temp_max),\n      ico: <i className={faWeather} title={data.weather[0].description}></i>,\n      humid: data.main.humidity,\n      feels: Math.round(data.main.feels_like),\n      press: data.main.pressure,\n      windSpd: data.wind.speed,\n      sunrise: sunriseDate,\n      sunset: sunsetDate\n    });\n  }\n\n  componentDidMount = () => { //Jquery\n    $(document).ready(function() {\n      \n      function dateTime() {\n          let date = new Date();\n          let day = date.getDate().toString();\n          let month = date.getMonth().toString() + 1;\n          let year = date.getFullYear().toString();\n      \n          let hours = date.getHours().toString();\n          let minutes = date.getMinutes().toString();\n          let seconds = date.getSeconds().toString();\n      \n          let bgColor = \"#\" + hours + minutes + seconds;\n      \n          if(seconds.length < 2) {\n              seconds = '0' + seconds;\n          }\n          if(minutes.length < 2) {\n              minutes = '0' + minutes;\n          }\n          if(hours.length < 2) {\n              hours = '0' + hours;\n          }\n          if(day.length < 2) {\n              day = '0' + day;\n          }\n          if(month.length < 2) {\n              month = '0' + month;\n          }\n      \n          let fullDate = day + \".\" + month + \".\" + year;\n          let fullTime = hours + \":\" + minutes + \":\" + seconds;\n      \n          $('#time').text(fullTime);\n      \n          $('#date').text(fullDate);\n      \n          $('#clock').css({backgroundColor: `${bgColor}`});\n      }\n      dateTime();\n      setInterval(dateTime, 1000);\n  });\n  }\n  \n  render() {\n    return (\n      <div id=\"wrapper\">\n        <div id=\"dateCitySearch\">\n            <p id=\"date\"></p>\n            <p id=\"city\">{this.state.city}</p>\n            <form onSubmit={this.gettingWeather}>\n                <input name=\"city\" autoFocus id=\"search\" type=\"text\" placeholder=\"City\" />\n                <button>Search <i className=\"fas fa-search\"></i></button>\n            </form>\n        </div>\n        <div id=\"tempDiv\">\n            <p id=\"minTemp\">min: <span>{this.state.minTemp}</span> <sup>o</sup>C</p>\n            <p id=\"temp\">{this.state.temp} <sup>o</sup>C</p>\n            <p id=\"maxTemp\">max: <span>{this.state.maxTemp}</span> <sup>o</sup>C</p>\n        </div>\n        <div id=\"weatherIco\">\n            {this.state.ico}\n        </div>\n        <div id=\"humidFeelsPresWindspd\">\n            <p id=\"humid\">Humidity: <span>{this.state.humid}</span>%</p>\n            <p id=\"feels\">Feels like: <span>{this.state.feels}</span> <sup>o</sup>C</p>\n            <p id=\"pressure\">Pressure: <span>{this.state.press}</span> mb</p>\n            <p>Wind speed: <span>{this.state.windSpd}</span> km/h</p>\n        </div>\n        <div id=\"sun\">\n            <p id=\"sunrise\">Sunrise: <span>{this.state.sunrise}</span></p>\n            <p id=\"sunset\">Sunset: <span>{this.state.sunset}</span></p>\n        </div>\n        <div id=\"clock\">\n            <p id=\"time\"></p>\n        </div>\n    </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}